# ======================================
# Environment Variables for gitmesh
# ======================================
# Copy this file to .env.local and fill in your API keys
# See README.md for setup instructions

# ======================================
# AI PROVIDER API KEYS
# ======================================

# Anthropic Claude
# Get your API key from: https://console.anthropic.com/
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# OpenAI GPT models
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here

# GitHub Models (OpenAI models hosted by GitHub)
# Get your Personal Access Token from: https://github.com/settings/tokens
# - Select "Fine-grained tokens" 
# - Set repository access to "All repositories" 
# - Enable "GitHub Models" permission
GITHUB_API_KEY=github_pat_your_personal_access_token_here

# Perplexity AI (Search-augmented models)
# Get your API key from: https://www.perplexity.ai/settings/api
PERPLEXITY_API_KEY=your_perplexity_api_key_here

# DeepSeek
# Get your API key from: https://platform.deepseek.com/api_keys
DEEPSEEK_API_KEY=your_deepseek_api_key_here

# Google Gemini
# Get your API key from: https://makersuite.google.com/app/apikey
GOOGLE_GENERATIVE_AI_API_KEY=your_google_gemini_api_key_here

# Cohere
# Get your API key from: https://dashboard.cohere.ai/api-keys
COHERE_API_KEY=your_cohere_api_key_here

# Groq (Fast inference)
# Get your API key from: https://console.groq.com/keys
GROQ_API_KEY=your_groq_api_key_here

# Mistral
# Get your API key from: https://console.mistral.ai/api-keys/
MISTRAL_API_KEY=your_mistral_api_key_here

# Together AI
# Get your API key from: https://api.together.xyz/settings/api-keys
TOGETHER_API_KEY=your_together_api_key_here

# X.AI (Elon Musk's company)
# Get your API key from: https://console.x.ai/
XAI_API_KEY=your_xai_api_key_here

# Moonshot AI (Kimi models)
# Get your API key from: https://platform.moonshot.ai/console/api-keys
MOONSHOT_API_KEY=your_moonshot_api_key_here

# Hugging Face
# Get your API key from: https://huggingface.co/settings/tokens
HuggingFace_API_KEY=your_huggingface_api_key_here

# Hyperbolic
# Get your API key from: https://app.hyperbolic.xyz/settings
HYPERBOLIC_API_KEY=your_hyperbolic_api_key_here

# OpenRouter (Meta routing for multiple providers)
# Get your API key from: https://openrouter.ai/keys
OPEN_ROUTER_API_KEY=your_openrouter_api_key_here

# ======================================
# CUSTOM PROVIDER BASE URLS (Optional)
# ======================================

# Ollama (Local models)
# DON'T USE http://localhost:11434 due to IPv6 issues
# USE: http://127.0.0.1:11434
OLLAMA_API_BASE_URL=http://127.0.0.1:11434

# OpenAI-like API (Compatible providers)
OPENAI_LIKE_API_BASE_URL=your_openai_like_base_url_here
OPENAI_LIKE_API_KEY=your_openai_like_api_key_here

# Together AI Base URL
TOGETHER_API_BASE_URL=your_together_base_url_here

# Hyperbolic Base URL
HYPERBOLIC_API_BASE_URL=https://api.hyperbolic.xyz/v1/chat/completions

# LMStudio (Local models)
# Make sure to enable CORS in LMStudio
# DON'T USE http://localhost:1234 due to IPv6 issues
# USE: http://127.0.0.1:1234
LMSTUDIO_API_BASE_URL=http://127.0.0.1:1234

# ======================================
# CLOUD SERVICES CONFIGURATION
# ======================================

# AWS Bedrock Configuration (JSON format)
# Get your credentials from: https://console.aws.amazon.com/iam/home
# Example: {"region": "us-east-1", "accessKeyId": "yourAccessKeyId", "secretAccessKey": "yourSecretAccessKey"}
AWS_BEDROCK_CONFIG=your_aws_bedrock_config_json_here

# ======================================
# GITHUB INTEGRATION
# ======================================

# GitHub Personal Access Token
# Get from: https://github.com/settings/tokens
# Used for importing/cloning repositories and accessing private repos
VITE_GITHUB_ACCESS_TOKEN=your_github_personal_access_token_here

# GitHub Token Type ('classic' or 'fine-grained')
VITE_GITHUB_TOKEN_TYPE=classic

# ======================================
# GITLAB INTEGRATION
# ======================================

# GitLab Personal Access Token
# Get your GitLab Personal Access Token here:
# https://gitlab.com/-/profile/personal_access_tokens
#
# This token is used for:
# 1. Importing/cloning GitLab repositories
# 2. Accessing private projects
# 3. Creating/updating branches
# 4. Creating/updating commits and pushing code
# 5. Creating new GitLab projects via the API
#
# Make sure your token has the following scopes:
# - api (for full API access including project creation and commits)
# - read_repository (to clone/import repositories)
# - write_repository (to push commits and update branches)
VITE_GITLAB_ACCESS_TOKEN=your_gitlab_personal_access_token_here

# Set the GitLab instance URL (e.g., https://gitlab.com or your self-hosted domain)
VITE_GITLAB_URL=https://gitlab.com

# GitLab token type should be 'personal-access-token'
VITE_GITLAB_TOKEN_TYPE=personal-access-token

# ======================================
# VERCEL INTEGRATION
# ======================================

# Vercel Access Token
# Get your access token from: https://vercel.com/account/tokens
# This token is used for:
# 1. Deploying projects to Vercel
# 2. Managing Vercel projects and deployments
# 3. Accessing project analytics and logs
VITE_VERCEL_ACCESS_TOKEN=your_vercel_access_token_here

# ======================================
# NETLIFY INTEGRATION
# ======================================

# Netlify Access Token
# Get your access token from: https://app.netlify.com/user/applications
# This token is used for:
# 1. Deploying sites to Netlify
# 2. Managing Netlify sites and deployments
# 3. Accessing build logs and analytics
VITE_NETLIFY_ACCESS_TOKEN=your_netlify_access_token_here

# ======================================
# SUPABASE INTEGRATION
# ======================================

# Supabase Project Configuration
# Get your project details from: https://supabase.com/dashboard
# Select your project → Settings → API
VITE_SUPABASE_URL=your_supabase_project_url_here
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Supabase Access Token (for management operations)
# Generate from: https://supabase.com/dashboard/account/tokens
VITE_SUPABASE_ACCESS_TOKEN=your_supabase_access_token_here

# ======================================
# DEVELOPMENT SETTINGS
# ======================================

# Development Mode
NODE_ENV=development

# Application Port (optional, defaults to 5173 for development)
PORT=5173

# Logging Level (debug, info, warn, error)
VITE_LOG_LEVEL=debug

# Default Context Window Size (for local models)
DEFAULT_NUM_CTX=32768


# ======================================
# SLACK CONFIGURATION
# ======================================
# Create an app in Slack and update the below details
VITE_SLACK_BOT_TOKEN=your__slack_bot_token_here
VITE_SLACK_TEAM_ID=your__slack_team_id_here
VITE_SLACK_CHANNEL_IDS=your__slack_channel_ids_here

# ======================================
# GITMESH CONFIGURATION
# ======================================
# Copy this file to `.env.local` and fill in your actual API keys and configuration
# See README.md for setup instructions

# ======================================
# ACTIVE SERVERS
# ======================================

# Communication & Collaboration
# --------------------------------------------------
# Discord
VITE_DISCORD_TOKEN=your__discord_token
VITE_DISCORD_GUILD_ID=your__discord_guild_id
VITE_SQLITE_DB_PATH=./data/data.db
VITE_FILESYSTEM_PATH=./mcp-files
VITE_JENKINS_MCP_URL=http://your__jenkins/mcp-server/mcp
VITE_JENKINS_AUTH_TOKEN=Basic your__encoded_token
VITE_GITHUB_ACCESS_TOKEN=your__github_access_token
VITE_READWISE_TOKEN=your__readwise_token
VITE_CODECOV_GIT_URL=https://github.com/your__repo

# Slack
VITE_SLACK_BOT_TOKEN=your__slack_bot_token
VITE_SLACK_TEAM_ID=your__slack_team_id
VITE_SLACK_CHANNEL_IDS=your__slack_channel_ids

# Version Control & Code Hosting
# --------------------------------------------------
# GitHub & GitHub Dependabot
VITE_GITHUB_ACCESS_TOKEN=your__github_token
VITE_GITHUB_DEPENDABOT_PATH=/path/to/github-dependabot

# GitLab
VITE_GITLAB_PERSONAL_ACCESS_TOKEN=your__gitlab_access_token
VITE_GITLAB_API_URL=https://gitlab.com/api/v4

# Git (uvx)
HOME=your__username

# Container & Infrastructure
# --------------------------------------------------
# Docker
VITE_DOCKER_HOST=unix:///var/run/docker.sock

# Kubernetes
# No additional env vars needed

# Project Management & Issue Tracking
# --------------------------------------------------
# Atlassian (Confluence + Jira)
VITE_CONFLUENCE_URL=https://your__domain.atlassian.net/wiki
VITE_CONFLUENCE_USERNAME=your__confluence_email
VITE_CONFLUENCE_API_TOKEN=your__confluence_api_token
VITE_LOCAL_JIRA_BASE_URL=https://your__jira_instance.atlassian.net
VITE_LOCAL_JIRA_EMAIL=your__jira_email
VITE_LOCAL_JIRA_API_TOKEN=your__jira_api_token

# Linear
VITE_LINEAR_API_KEY=your__linear_api_key

# Notion
VITE_NOTION_TOKEN=your__notion_token

# Cloud Platforms
# --------------------------------------------------
# Azure
VITE_AZURE_MCP_COLLECT_TELEMETRY=false

# CI/CD & DevOps
# --------------------------------------------------
# CircleCI
VITE_CIRCLECI_TOKEN=your__circleci_token
VITE_CIRCLECI_BASE_URL=https://circleci.com

# Monitoring & Error Tracking
# --------------------------------------------------
# Sentry
VITE_SENTRY_TOKEN=your__sentry_token
VITE_SENTRY_ORG=your__sentry_org

# Security & Code Quality
# --------------------------------------------------
# Snyk
VITE_SNYK_API_KEY=your__snyk_token
VITE_SNYK_ORG_ID=your__snyk_org_id

# Codecov
VITE_CODECOV_API_KEY=your__codecov_api_key
VITE_CODECOV_GIT_URL=your__git_url

# VirusTotal
VITE_VIRUSTOTAL_API_KEY=your__virustotal_api_key

# Documentation & Knowledge
# --------------------------------------------------
# OpenAI (for docs server)
VITE_OPENAI_API_KEY=your__openai_api_key

# GitBook
VITE_GITBOOK_ORG_ID=your__gitbook_org_id
VITE_GITBOOK_API_TOKEN=your__gitbook_api_token

# DeepWiki
VITE_DEEPWIKI_URL=https://mcp.deepwiki.com/mcp

# Storage & Files
# --------------------------------------------------
# Google Drive
VITE_GDRIVE_CREDENTIALS_PATH=/path/to/your__gdrive_server_credentials.json

# Filesystem
# No additional env vars needed - uses process.cwd()

# Social Media
# --------------------------------------------------
# Reddit (uvx)
# No additional env vars needed - uses PATH and HOME

# X/Twitter
VITE_X_SERVER_PATH=/path/to/x-server/index.js
VITE_TWITTER_API_KEY=your__twitter_api_key
VITE_TWITTER_API_SECRET=your__twitter_api_secret
VITE_TWITTER_ACCESS_TOKEN=your__twitter_access_token
VITE_TWITTER_ACCESS_SECRET=your__twitter_access_secret

# Web & Browser
# --------------------------------------------------
# Brave Search
VITE_BRAVE_API_KEY=your__brave_api_key

# Puppeteer
# No additional env vars needed

# Fetch
# No additional env vars needed

# Markdownify
VITE_MARKDOWNIFY_PATH=/path/to/markdownify/server.js
VITE_UV_PATH=/path/to/uv

# Database
# --------------------------------------------------
# PostgreSQL
VITE_POSTGRES_CONNECTION_STRING=postgresql://your__user:your__password@localhost:5432/your__database

# SQLite
VITE_SQLITE_DB_PATH=/path/to/your__database.db

# Jenkins
VITE_JENKINS_MCP_URL=http://your__jenkins_host/mcp-server/mcp
VITE_JENKINS_AUTH_TOKEN=Basic your__encoded_token

# Travis CI
VITE_TRAVIS_TOKEN=your__travis_token
VITE_TRAVIS_API_URL=https://api.travis-ci.com

# Azure DevOps
VITE_AZURE_DEVOPS_ORG_URL=https://dev.azure.com/your__org
VITE_AZURE_DEVOPS_PAT=your__personal_access_token

# SonarQube
VITE_SONAR_HOST_URL=https://your__sonarqube_instance
VITE_SONAR_TOKEN=your__sonar_token

# ReadTheDocs
VITE_RTD_API_TOKEN=your__readthedocs_token



# ======================================
# SETUP INSTRUCTIONS
# ======================================
# 1. Copy this file to .env.local: cp .env.example .env.local
# 2. Fill in the API keys for the services you want to use
# 3. All service integration keys use VITE_ prefix for auto-connection
# 4. Restart your development server: pnpm run dev
# 5. Services will auto-connect on startup if tokens are provided
# 6. Go to Settings > Service tabs to manage connections manually if needed
